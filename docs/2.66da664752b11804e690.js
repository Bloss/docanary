(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{35:function(n,e,a){"use strict";a.r(e);var t=a(0),o=a.n(t),s=(a(14),a(44)),c=a.n(s),p=a(49),r=a(45),d=a(48),i=function(n){return String(n).replace(/&amp;/g,"&").replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/&#x3A;/g,":").replace(/&lt;/g,"<").replace(/&gt;/g,">")},l=c()('<h2 id="metadata"><a class="header-anchor" href="#metadata" aria-hidden="true">#</a> metadata</h2>\n<p>这是文章的元信息, 它包含了一些文章的基础信息, 比如标题, 时间等等. 它应该在文章的开头以 <code>YAML</code> 的格式书写.</p>\n\x3c!--beforebegin--\x3e<div class=\'language-md language-mode\'>\x3c!--afterbegin--\x3e<pre class="language-md"><code><span class="token hr punctuation">---</span>\nid: add-doc\ntitle: 写文档\n<span class="token title important">date: 2018-01-10 00:22:56\n<span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">##</span> your doc</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<div class="tip container-block"><p class="container-block-title">建议</p>\n<p>强烈建议在元信息中加上时间 <code>date</code> 属性, 因为我们根据这个属性来对文档进行排序, 最新发布的在前面.</p>\n</div>\n<h2 id="snippet"><a class="header-anchor" href="#snippet" aria-hidden="true">#</a> snippet</h2>\n<p>在 markdown 文件中, 我们允许你使用 <code>&lt;&lt;&lt; @/filepath{highlightLines}</code> 这样的语法来引入其他的文件.</p>\n<div class="tip container-block"><p class="container-block-title">解释</p>\n<p>这里的 <code>@</code> alias 是 <code>process.cwd()</code>, 如果你不熟悉 Node, 可以认为这是你项目的根目录, 与 <code>siteConfig.js</code> 同级. 因此引入文件的路径应该是相对于 <code>@</code> 这个路径的.</p>\n</div>\n<h2 id="container"><a class="header-anchor" href="#container" aria-hidden="true">#</a> container</h2>\n<p>也可以使用如下的语法来创建一个 <code>container</code>:</p>\n<p><strong>Input</strong></p>\n\x3c!--beforebegin--\x3e<div class=\'language-md language-mode\'>\x3c!--afterbegin--\x3e<pre class="language-md"><code>::: tip TIP\n这是提示\n:::\n\n::: warning 警告⚠️\n这是警告\n:::\n\n::: danger DANGER\n这是 danger\n:::\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p><strong>Ouput</strong></p>\n<div class="tip container-block"><p class="container-block-title">提示</p>\n<p>这是提示</p>\n</div>\n<div class="warning container-block"><p class="container-block-title">警告⚠️</p>\n<p>这是警告</p>\n</div>\n<div class="danger container-block"><p class="container-block-title">DANGER</p>\n<p>这是 danger</p>\n</div>\n<h2 id="代码行高亮"><a class="header-anchor" href="#代码行高亮" aria-hidden="true">#</a> 代码行高亮</h2>\n<p><strong>Input</strong></p>\n\x3c!--beforebegin--\x3e<div class=\'language- language-mode\'>\x3c!--afterbegin--\x3e<pre class="language-text"><code>```js {4}\nexport default {\n  render() {\n    return {\n      msg: &#39;Highlighted!&#39;\n    }\n  }\n}\n```\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p><strong>Output</strong></p>\n\x3c!--beforebegin--\x3e<div class=\'language-js language-mode\'>\x3c!--afterbegin--\x3e<div class="highlight-lines"><br><br><br><div class="highlighted">&nbsp;</div><br><br><br><br></div><pre class="language-js"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      msg<span class="token punctuation">:</span> <span class="token string">\'Highlighted!\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="在-markdown-文件中使用-react-component"><a class="header-anchor" href="#在-markdown-文件中使用-react-component" aria-hidden="true">#</a> 在 markdown 文件中使用 React Component</h2>\n\x3c!--InjectComponentStart:AlphaTag--\x3e<AlphaTag>目前处于 alpha 阶段</AlphaTag>\n\x3c!--InjectComponentEnd:AlphaTag--\x3e\x3c!--beforebegin--\x3e<div class=\'language- language-mode\'>\x3c!--afterbegin--\x3e<pre class="language-text"><code>.\n├── components\n│   ├── AlphaTag\n│   │   ├── index.js\n│   │   └── index.styl\n│   └── TodoTag\n│       ├── index.js\n│       └── index.styl\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>假如你在项目的根目录有以上文件. 那么你可以使用这些 component.</p>\n<p><strong>Input</strong></p>\n\x3c!--beforebegin--\x3e<div class=\'language-js language-mode\'>\x3c!--afterbegin--\x3e<pre class="language-js"><code><span class="token operator">&lt;</span>TodoTag<span class="token operator">></span><span class="token constant">TODO</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoTag<span class="token operator">></span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p><strong>Output</strong></p>\n\x3c!--InjectComponentStart:TodoTag--\x3e<TodoTag>TODO</TodoTag>\n\x3c!--InjectComponentEnd:TodoTag--\x3e');["AlphaTag","TodoTag"].forEach(function(n){var e=r.a[n],a=new RegExp("(?<=(&lt;!--InjectComponentStart:"+n+"--&gt;))(.*[^\\/])?(?=(&lt;!--InjectComponentEnd:"+n+"--&gt;))","mg");l=l.replace(a,function(a){var t=i(a),s=t.indexOf("<"+n+">"),c=t.indexOf("</"+n+">"),p=t.substring(s+n.length+2,c);return Object(d.renderToStaticMarkup)(o.a.createElement(e,null,p))})}),l=i(l),e.default=function(){return o.a.createElement(p.a,null,o.a.createElement("div",{className:"post-content",dangerouslySetInnerHTML:{__html:l}}))}},42:function(n,e,a){n.exports={alphaTag:"alphaTag_2b1AW2sz"}},43:function(n,e,a){n.exports={todoTag:"todoTag_3V_1OxMD"}},46:function(n,e,a){"use strict";var t=a(0),o=a.n(t),s=a(42),c=a.n(s);e.a=function(n){return o.a.createElement("span",{className:c.a.alphaTag},n.children)}},47:function(n,e,a){"use strict";var t=a(0),o=a.n(t),s=a(43),c=a.n(s);e.a=function(n){return o.a.createElement("span",{className:c.a.todoTag},n.children)}}}]);