(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{39:function(n,a,s){"use strict";s.r(a);var e=s(0),t=s.n(e),o=(s(14),s(44)),c=s.n(o),p=s(49),r=s(45),d=s(48),i=function(n){return String(n).replace(/&amp;/g,"&").replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/&#x3A;/g,":").replace(/&lt;/g,"<").replace(/&gt;/g,">")},l=c()('<h2 id="介绍"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2>\n<p>这个配置文件包含了网站几乎所有的配置. 它长成下面这样</p>\n\x3c!--beforebegin--\x3e<div class=\'language-js language-mode\'>\x3c!--afterbegin--\x3e<pre class="language-js"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token string">\'Docanary\'</span><span class="token punctuation">,</span>\n  baseUrl<span class="token punctuation">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n  docsUrl<span class="token punctuation">:</span> <span class="token string">\'docs\'</span><span class="token punctuation">,</span>\n  docsDir<span class="token punctuation">:</span> <span class="token string">\'docs\'</span><span class="token punctuation">,</span>\n  pagesDir<span class="token punctuation">:</span> <span class="token string">\'pages\'</span><span class="token punctuation">,</span>\n  markdown<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    breaks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  navbarLinks<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">\'Documentation\'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">\'/docs\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">\'Github\'</span><span class="token punctuation">,</span> href<span class="token punctuation">:</span> <span class="token string">\'https://github.com/bloss/docanary\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="title"><a class="header-anchor" href="#title" aria-hidden="true">#</a> title</h2>\n\x3c!--InjectComponentStart:TodoTag--\x3e<TodoTag>TODO</TodoTag>\n\x3c!--InjectComponentEnd:TodoTag--\x3e<p>这个值为 <code>document.title</code>, 这个值随着文档路径的变化会跟着改变</p>\n<h2 id="baseurl"><a class="header-anchor" href="#baseurl" aria-hidden="true">#</a> baseUrl</h2>\n<p>网站的 baseUrl, 一般来说是域名后面的路径, 比如 <code>bloss.github.io/docanary</code>, 那么 baseUrl 就是 <code>/docanary</code>, 如果你不想设置任何子路径, 请把它设置为 <code>/</code>.</p>\n<h2 id="docsurl"><a class="header-anchor" href="#docsurl" aria-hidden="true">#</a> docsUrl</h2>\n<p>这个配置指定了你的文档子路径, 默认值为 <code>docs</code>, 比如设置为 <code>docs</code>, 那么你的文档路径就应该为 <code>baseUrl/docs</code>.</p>\n<div class="tip container-block"><p class="container-block-title">TIP</p>\n<p>文档生成的默认路径是: <code>baseUrl</code> + <code>docsUrl</code> + <code>文件名</code><br>\n当然也可以指定给定的路径, 见 permalink</p>\n</div>\n<h2 id="docsdir"><a class="header-anchor" href="#docsdir" aria-hidden="true">#</a> docsDir</h2>\n<p>这个配置指定了你的文档目录, 默认值是 <code>docs</code>, 你也可以设置为其他值, 比如叫做 <code>documentation</code>, 那么就会扫描 <code>documentation</code> 文件夹下的文档.</p>\n<h2 id="pagesdir"><a class="header-anchor" href="#pagesdir" aria-hidden="true">#</a> pagesDir</h2>\n<p>这个目录下放着一些除了主要的 docs 文档之外的页面, 比如说主页, about 页面, 默认值是 <code>pages</code>, 这些页面往往需要指定 <code>permalink</code>. 而且这些 markdown 文件也有一些特殊的语法. 它们往往也会通过自定义的 React component 来构造.</p>\n<h2 id="componentsdir"><a class="header-anchor" href="#componentsdir" aria-hidden="true">#</a> componentsDir</h2>\n\x3c!--InjectComponentStart:AlphaTag--\x3e<AlphaTag>alpha</AlphaTag>\n\x3c!--InjectComponentEnd:AlphaTag--\x3e<p>这个目录下放着用户自定义的一些 React 组件, 默认值是 <code>components</code>. 没错, 他们可以在 markdown 文件中使用: 以 html tag 的方式引入, 不过不能是 <code>inline</code> 的方式. 它目前还不成熟, 有一些限制, 比如文件的组织结构只能为 <code>component/index.js</code> 这样的结构. 而且由于它们是用 <code>react-dom/server</code> 中的 <code>renderToString</code> 渲染出来的, 所以它们没法响应一些事件, 但是他们可以做一些样式的美化. 比如网站的首页完全可以用 React 组件来构造出更灵活的布局.</p>\n<h2 id="navbarlinks"><a class="header-anchor" href="#navbarlinks" aria-hidden="true">#</a> navbarLinks</h2>\n<p>这些是 navbar 上的一些链接, 如果链接属性是 <code>link</code>, 那么这个是文档内部链接. 如果想用外部链接, 比如项目的 github 地址, 请使用 <code>href</code> 属性.</p>\n');["TodoTag","AlphaTag"].forEach(function(n){var a=r.a[n],s=new RegExp("(?<=(&lt;!--InjectComponentStart:"+n+"--&gt;))(.*[^\\/])?(?=(&lt;!--InjectComponentEnd:"+n+"--&gt;))","mg");l=l.replace(s,function(s){var e=i(s),o=e.indexOf("<"+n+">"),c=e.indexOf("</"+n+">"),p=e.substring(o+n.length+2,c);return Object(d.renderToStaticMarkup)(t.a.createElement(a,null,p))})}),l=i(l),a.default=function(){return t.a.createElement(p.a,null,t.a.createElement("div",{className:"post-content",dangerouslySetInnerHTML:{__html:l}}))}},42:function(n,a,s){n.exports={alphaTag:"alphaTag_2b1AW2sz"}},43:function(n,a,s){n.exports={todoTag:"todoTag_3V_1OxMD"}},46:function(n,a,s){"use strict";var e=s(0),t=s.n(e),o=s(42),c=s.n(o);a.a=function(n){return t.a.createElement("span",{className:c.a.alphaTag},n.children)}},47:function(n,a,s){"use strict";var e=s(0),t=s.n(e),o=s(43),c=s.n(o);a.a=function(n){return t.a.createElement("span",{className:c.a.todoTag},n.children)}}}]);